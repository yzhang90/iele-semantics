; ERC20-EVM Specification Template Parameters
; For more details, refer to README.md.

[totalSupply]
k: (#execute => #end) ~> _
output: _ => (TOTAL_SUPPLY, .Ints)
callStack: _
callDepth: _
localCalls: .List
callData: .Ints
callValue: _
regs: .Map => _
localMem: .Map => _
peakMem: _ => _
currentMem: _ => _
fid: totalSupply
gas: #infinity
log: _
refund: _
activeAccounts: _
storage:
    0 |-> TOTAL_SUPPLY
    _:Map
requires:

[balanceOf]
k: (#execute => #end) ~> _
output: _ => (BAL, .Ints)
callStack: _
callDepth: _
localCalls: .List
callData: OWNER_ID, .Ints
callValue: _
regs: (0 |-> OWNER .Map) => _
localMem: .Map => _
peakMem: _ => _
currentMem: _ => _
fid: balanceOf
gas: #infinity
log: _
refund: _
activeAccounts: _
storage:
    #mapKey(1, OWNER) |-> BAL
    _:Map
requires:

[allowance]
k: (#execute => #end) ~> _
output: _ => (ALLOWANCE, .Ints)
callStack: _
callDepth: _
localCalls: .List
callData: OWNER, SPENDER, .Ints
callValue: _
regs:
    (0 |-> OWNER
     1 |-> SPENDER
     .Map) => _
localMem: .Map => _
peakMem: _ => _
currentMem: _ => _
fid: allowance
gas: #infinity
log: _
refund: _
activeAccounts: _
storage:
    #mapKey(#mapKey(2, OWNER), SPENDER) |-> ALLOWANCE
    _:Map
requires:

[approve]
callStack: _
callDepth: _
localCalls: .List
callData: SPENDER, VALUE, .Ints
callValue: _
regs:
    (0 |-> SPENDER
     1 |-> VALUE
     .Map) => _
localMem: .Map => _
peakMem: _ => _
currentMem: _ => _
fid: approve
gas: #infinity
refund: _ => _
activeAccounts: _
requires:
    andBool 0 <=Int SPENDER
    andBool SPENDER <Int pow160

[approve-success]
k: (#execute => #end) ~> _
output: _ => (1, .Ints)
log: _:List ( .List => ListItem(#eventLog(ACCT_ID, #topics(#approvalEvent, CALLER_ID, SPENDER), Int2Bytes(VALUE, LE, Signed))) )
storage:
    #mapKey(#mapKey(2, CALLER_ID), SPENDER) |-> (_ => VALUE)
    _:Map
+requires:
    andBool VALUE >=Int 0

[approve-fail]
k: (#execute => #exception(4)) ~> _
output: _ => _
log: _
storage:
    _:Map
+requires:
    andBool VALUE <Int 0

[transfer]
callStack: _
callDepth: _
localCalls: .List
callData: TO_ID, VALUE, .Ints
callValue: _
regs:
    (0 |-> TO_ID
     1 |-> VALUE
     .Map) => _
localMem: .Map => _
peakMem: _ => _
currentMem: _ => _
fid: transfer
gas: #infinity
refund: _ => _
activeAccounts: _
requires:
    andBool 0 <=Int TO_ID
    andBool TO_ID <Int pow160

[transfer-success]
k: (#execute => #end) ~> _
output: _ => (1, .Ints)
log: _:List ( .List => ListItem(#eventLog(ACCT_ID, #topics(#transferEvent, CALLER_ID, TO_ID), Int2Bytes(VALUE, LE, Signed))) )
+requires:
    andBool 0 <=Int VALUE

[transfer-success-1]
storage:
    #mapKey(1, CALLER_ID) |-> (BAL_FROM => BAL_FROM -Int VALUE)
    #mapKey(1, TO_ID)     |-> (BAL_TO   => BAL_TO   +Int VALUE)
    _:Map
+requires:
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE <=Int BAL_FROM

[transfer-success-2]
storage:
    #mapKey(1, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE <=Int BAL_FROM

[transfer-failure]
k: (#execute => #exception(4)) ~> _
output: _ => _
log: _

[transfer-failure-1]
storage:
    _:Map
+requires:
    andBool VALUE <Int 0

[transfer-failure-2]
storage:
    #mapKey(1, CALLER_ID) |-> (BAL_FROM => _)
    #mapKey(1, TO_ID)     |-> BAL_TO
    _:Map
+requires:
    andBool 0 <=Int VALUE
    andBool CALLER_ID =/=Int TO_ID
    andBool VALUE >Int BAL_FROM

[transfer-failure-3]
storage:
    #mapKey(1, CALLER_ID) |-> BAL_FROM
    _:Map
+requires:
    andBool 0 <=Int VALUE
    andBool CALLER_ID ==Int TO_ID
    andBool VALUE >Int BAL_FROM


[pgm]
code
